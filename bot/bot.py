from aiogram import Bot, Dispatcher, Router, types
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.types import BotCommand
from aiogram.filters import Command, CommandObject
from asgiref.sync import sync_to_async
from django.core.cache import cache

from bot.utils import get_weather, create_response
from weather_app.settings import TELEGRAM_TOKEN
from app.models import WeatherRequest, UserSettings

session = AiohttpSession()
bot_token = TELEGRAM_TOKEN
bot = Bot(token=bot_token, session=session)
dp = Dispatcher()
router = Router()
dp.include_router(router)


async def onstart():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="weather", description="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ"),
        BotCommand(command="setcity", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥–æ—Ä–æ–¥"),
        BotCommand(command="getcity", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ"),
    ])


@router.message(Command(commands=['start']))
async def start_command(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≥–æ–¥—ã.\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "1. /weather <–≥–æ—Ä–æ–¥> ‚Äî –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ.\n"
        "2. /setcity <–≥–æ—Ä–æ–¥> ‚Äî –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã.\n"
        "3. /getcity ‚Äî –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≤–∞—à–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–º –≥–æ—Ä–æ–¥–µ.",
    )


@router.message(Command(commands=['weather']))
async def weather_command(message: types.Message, command: CommandObject):
    if not command.args:
        await message.reply("–ù–µ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /weather <–≥–æ—Ä–æ–¥>.")
    else:
        city = command.args
        response_text = await create_response(city, message.from_user.id)
        await message.reply(response_text)


@router.message(Command(commands=['setcity']))
async def set_city_command(message: types.Message, command: CommandObject):
    if not command.args:
        await message.reply("–ù–µ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /setcity <–≥–æ—Ä–æ–¥>.")
    else:
        city = command.args
        await sync_to_async(UserSettings.objects.update_or_create)(
            user_id=message.from_user.id,
            defaults={'preferred_city': city}
        )
        await message.reply(f"–ì–æ—Ä–æ–¥ {city} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π.")


@router.message(Command(commands=['getcity']))
async def get_city_command(message: types.Message, command: CommandObject):
    user_settings = await sync_to_async(UserSettings.objects.filter(user_id=message.from_user.id).first)()
    if not user_settings or not user_settings.preferred_city:
        await message.reply(
            "–í—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥–æ—Ä–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setcity <–≥–æ—Ä–æ–¥>."
        )
    else:
        city = user_settings.preferred_city
        response_text = await create_response(city, message.from_user.id)
        await message.reply(response_text)

